{"version":3,"sources":["components/TimeDisplay.tsx","components/Timer.tsx","components/Bubble.tsx","components/BubbleTable.tsx","components/SourceCodeLink.tsx","components/BottomNav.tsx","components/TimesManager.tsx","components/Title.tsx","App.tsx","index.tsx"],"names":["zeroPad","value","digits","padded","toString","length","TimeDisplay","time","prefix","classes","stringTime","minutes","seconds","milliseconds","className","defaultProps","undefined","Timer","initialTime","sendFinal","useState","duration","currentTime","setCurrentTime","mostRecentTime","useRef","useEffect","timer","setInterval","Date","getTime","valueOf","Math","floor","current","clearInterval","images","src","alt","Bubble","row","col","onPress","honker","Audio","process","handlePress","play","events","window","touch","mousedown","role","onMouseDown","onTouchStart","width","copyGrid","grid","newGrid","map","push","initialGrid","inner","j","i","createInitialGrid","BubbleTable","requestGameEnd","requestGameStart","Grid","setGrid","gaming","React","TimerContext","doToggle","every","el","gridIsClear","val","uniqueId","SourceCodeLink","LOGO_LINK","href","BottomNav","bestTime","attempts","TimesManager","times","setTimes","setBestTime","setAttempts","setGaming","addTime","checkBestTime","Provider","timerDisplayClasses","renderTimer","Title","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAkBMA,EAAU,SAACC,EAAeC,GAG9B,IAFA,IACIC,EADcF,EAAMG,WAEjBD,EAAOE,OAASH,GACrBC,EAAM,WAAOA,GAEf,OAAOA,GAGHG,EAAyD,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxEC,EAAyB,CAC7BC,QAASX,EAAQO,EAAKI,QAAS,GAC/BC,QAASZ,EAAQO,EAAKK,QAAS,GAC/BC,aAAcb,EAAQO,EAAKM,aAAc,IAG3C,OACE,oBAAGC,UAAWL,EAAO,UAAMA,EAAN,SAAuB,OAA5C,UACGD,EACAE,EAAWC,QAFd,IAIGD,EAAWE,QAJd,IAMGF,EAAWG,iBAKlBP,EAAYS,aAAe,CACzBP,YAAQQ,EACRP,aAASO,GAGIV,QCJAW,EApCoC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UACjE,EAAsCC,mBAAe,CAAET,QAAS,EAAGC,QAAS,EAAGC,aAAc,EAAGQ,SAAU,IAA1G,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAiBC,iBAAO,CAAEd,QAAS,EAAGC,QAAS,EAAGC,aAAc,EAAGQ,SAAU,IA+BnF,OA7BAK,qBAAU,WACR,IAAMC,EAAQC,aAAY,WACxB,IAAMrB,EAAa,CACjBI,QAAS,EACTC,QAAS,EACTC,aAAc,EACdQ,SAAU,GAGRA,GAAW,IAAIQ,MAAOC,UAAYZ,EACtCX,EAAKc,SAAWA,EAASU,UAEzBxB,EAAKI,QAAUqB,KAAKC,MAAMZ,EAAQ,KAClCA,GAAa,IAEbd,EAAKK,QAAUoB,KAAKC,MAAMZ,EAAW,KACrCA,GAAY,IAEZd,EAAKM,aAAeQ,EAEpBE,EAAehB,GACfiB,EAAeU,QAAU3B,IACxB,IACH,OAAO,WACL4B,cAAcR,GACdR,EAAUK,EAAeU,YAE1B,CAAChB,EAAaC,IAET,cAAC,EAAD,CAAaZ,KAAMe,EAAab,QAAQ,iB,OCnB5C2B,EACO,CACTC,IAAK,2EACLC,IAAK,eAHHF,EAKK,CACPC,IAAK,4EACLC,IAAK,gBA8BMC,EA1BsC,SAAC,GAAkC,IAAhCtC,EAA+B,EAA/BA,MAAOuC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QACjEC,EAA2B,IAAIC,MAAJ,UAAaC,kBAAb,cAE3BC,EAAc,WAClBH,EAAOI,OACPL,EAAQF,EAAKC,IAYTO,EARA,iBAAkBC,OAAiB,CAAEC,MAAOJ,EAAaK,eAAWnC,GACjE,CAAEkC,WAAOlC,EAAWmC,UAAWL,GASxC,OACE,qBAAKM,KAAK,OAAOC,YAAaL,EAAOG,UAAWG,aAAcN,EAAOE,MAArE,SACE,qBAAKK,MAAM,KAAKjB,IARErC,EAAQmC,EAAiBE,IAAMF,EAAeE,IAQjCD,IANbpC,EAAQmC,EAAiBC,IAAMD,EAAeC,SCxBhEmB,EAAW,SAACC,GAChB,IAAMC,EAAuB,GAE7B,OADAD,EAAKE,KAAI,SAACnB,GAAD,OAASkB,EAAQE,KAAR,YAAiBpB,OAC5BkB,GAGHG,EAlBoB,SAACrB,EAAaC,GAGtC,IAFA,IAAMqB,EAAmB,GACnBL,EAAoB,GACjBM,EAAI,EAAGA,EAAItB,EAAKsB,IACvBD,EAAMC,IAAK,EAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAKwB,IACvBP,EAAKO,GAAL,UAAcF,GAEhB,OAAOL,EASwBQ,CArBpB,EACG,GA2DDC,EArCgD,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAChF,EAAwBhD,mBAAsBoC,EAASK,IAAvD,mBAAOQ,EAAP,KAAaC,EAAb,KACMC,EAASC,aAAiBC,GAI1BC,EAAW,SAACV,EAAWD,GAC3B,IAAMN,EAAOD,EAASa,GAEtB,GADAZ,EAAKO,GAAGD,IAAMN,EAAKO,GAAGD,GAClBQ,GACF,GANgB,SAACd,GAAD,OAAgCA,EAAKkB,OAAM,SAACnC,GAAD,OAASA,EAAImC,OAAM,SAACC,GAAD,OAASA,QAMnFC,CAAYpB,GAEd,OADAU,IACOG,EAAQd,EAASK,SAG1BO,IAEF,OAAOE,EAAQb,IAGjB,OACE,uBAAO3C,UAAU,WAAjB,SACE,gCACIuD,EAAKV,KAAI,SAACnB,EAAKwB,GAAN,OACT,6BACGxB,EAAImB,KAAI,SAACmB,EAAKf,GAAN,OACP,6BACE,cAAC,EAAD,CAAQ9D,MAAO6E,EAAKtC,IAAKwB,EAAGvB,IAAKsB,EAAGrB,QAASgC,KADtCK,0BAFJA,8BC9CJC,EANkD,WAC/D,IACMC,EAAS,UAAMpC,kBAAN,+BACf,OAAQ,mBAAGqC,KAFS,4CAEZ,SAAsB,qBAAKpE,UAAU,OAAOuB,IAAK4C,EAAW3C,IAAI,mBCCpE6C,EAAqD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OACzD,sBAAKvE,UAAU,aAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,yCAAf,SACE,0CAEGuE,OAGL,qBAAKvE,UAAU,yCAAf,SACGsE,EAAW,cAAC,EAAD,CAAa5E,OAAO,SAASD,KAAM6E,EAAU3E,QAAQ,cAAiB,WAKxF0E,EAAUpE,aAAe,CAAEqE,cAAUpE,GAEtBmE,QCXFV,EAAeD,iBAAoB,GAmDjCc,EAjDkD,WAC/D,MAA0BlE,mBAAiB,IAA3C,mBAAOmE,EAAP,KAAcC,EAAd,KACA,EAAgCpE,qBAAhC,mBAAOgE,EAAP,KAAiBK,EAAjB,KACA,EAAgCrE,mBAAS,GAAzC,mBAAOiE,EAAP,KAAiBK,EAAjB,KACA,EAA4BtE,oBAAS,GAArC,mBAAOmD,EAAP,KAAeoB,EAAf,KAiBMC,EAAU,SAACrF,GACfiF,EAAS,CAACjF,GAAF,mBAAWgF,KAPC,SAAChF,SACJS,IAAboE,GAA2B7E,EAAKc,SAAW+D,EAAS/D,WACtDoE,EAAYlF,GAMdsF,CAActF,IAehB,OACE,eAACkE,EAAaqB,SAAd,CAAuB7F,MAAOsE,EAA9B,UACE,cAAC,EAAD,CAAaJ,eA9BD,WACdwB,GAAU,GACVD,EAAYL,EAAW,IA4BiBjB,iBAlCxB,WAChBuB,GAAU,MAkCR,qBAAK7E,UAAU,cAAf,SAfgB,WAClB,GAAIyD,EACF,OAAO,cAAC,EAAD,CAAOrD,aAAa,IAAIW,MAAOC,UAAWX,UAAWyE,IAE9D,IAAMpE,EAAiB+D,EAAM,GAC7B,QAAuBvE,IAAnBQ,EAA8B,CAChC,IAAMuE,EAAuBvE,IAAmB4D,EAAY,oBAAsB,kBAClF,OAAO,cAAC,EAAD,CAAa7E,KAAMiB,EAAgBf,QAASsF,KAShDC,KAEH,cAAC,EAAD,CAAWX,SAAUA,EAAUD,SAAUA,QClDhCa,EARoC,kBACjD,sBAAKnF,UAAU,kBAAf,UACE,qBAAKA,UAAU,gBAAf,qBACA,uBACA,qBAAKA,UAAU,mBAAf,sBCEWoF,EAPH,kBACV,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7af93270.chunk.js","sourcesContent":["// eslint-disable-next-line\nimport * as React from 'react'\nimport { Time } from './TimesManager'\n\nexport type DisplayTime = Pick<Time, 'minutes' | 'seconds' | 'milliseconds'>\n\ninterface TimeDisplayProps {\n    time: DisplayTime,\n    prefix?: string,\n    classes?: string,\n}\n\ninterface StringTime {\n    minutes: string,\n    seconds: string,\n    milliseconds: string,\n}\n\nconst zeroPad = (value: number, digits: number): string => {\n  const stringVal = value.toString()\n  let padded = stringVal\n  while (padded.length < digits) {\n    padded = `0${padded}`\n  }\n  return padded\n}\n\nconst TimeDisplay: React.FunctionComponent<TimeDisplayProps> = ({ time, prefix, classes }) => {\n  const stringTime: StringTime = {\n    minutes: zeroPad(time.minutes, 2),\n    seconds: zeroPad(time.seconds, 2),\n    milliseconds: zeroPad(time.milliseconds, 3),\n  }\n\n  return (\n    <p className={classes ? `${classes} time` : 'time'}>\n      {prefix}\n      {stringTime.minutes}\n      :\n      {stringTime.seconds}\n      .\n      {stringTime.milliseconds}\n    </p>\n  )\n}\n\nTimeDisplay.defaultProps = {\n  prefix: undefined,\n  classes: undefined,\n}\n\nexport default TimeDisplay\n","// eslint-disable-next-line\nimport * as React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport TimeDisplay from './TimeDisplay'\nimport { Time } from './TimesManager'\n\ninterface TimerProps {\n    initialTime: number,\n    sendFinal: (arg: Time) => void,\n}\n\nconst Timer: React.FunctionComponent<TimerProps> = ({ initialTime, sendFinal }) => {\n  const [currentTime, setCurrentTime] = useState<Time>({ minutes: 0, seconds: 0, milliseconds: 0, duration: 0 })\n  const mostRecentTime = useRef({ minutes: 0, seconds: 0, milliseconds: 0, duration: 0 })\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const time: Time = {\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0,\n        duration: 0,\n      }\n\n      let duration = new Date().getTime() - initialTime\n      time.duration = duration.valueOf()\n\n      time.minutes = Math.floor(duration / (1000 * 60))\n      duration %= (1000 * 60)\n\n      time.seconds = Math.floor(duration / 1000)\n      duration %= 1000\n\n      time.milliseconds = duration\n\n      setCurrentTime(time)\n      mostRecentTime.current = time\n    }, 10)\n    return () => {\n      clearInterval(timer)\n      sendFinal(mostRecentTime.current)\n    }\n  }, [initialTime, sendFinal])\n\n  return (<TimeDisplay time={currentTime} classes=\"bold-larger\" />)\n}\n\nexport default Timer\n","// eslint-disable-next-line\nimport * as React from 'react'\n\nexport interface BubbleProps {\n    value: boolean,\n    row: number,\n    col: number,\n    onPress: (i: number, j: number) => void,\n}\n\ninterface InteractionEvents {\n    touch: undefined | (() => void),\n    mousedown: undefined | (() => void),\n}\n\ninterface ImageData {\n    readonly src: string,\n    readonly alt: string,\n}\n\ninterface Images {\n    readonly pressed: ImageData,\n    readonly unpressed: ImageData\n}\n\nconst images: Images = {\n  unpressed: {\n    src: 'https://upload.wikimedia.org/wikipedia/commons/3/3f/Button_Icon_Blue.svg',\n    alt: 'blue button',\n  },\n  pressed: {\n    src: 'https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg',\n    alt: 'white button',\n  },\n}\n\nconst Bubble: React.FunctionComponent<BubbleProps> = ({ value, row, col, onPress }) => {\n  const honker: HTMLAudioElement = new Audio(`${process.env.PUBLIC_URL}/honk.mp3`)\n\n  const handlePress = () => {\n    honker.play()\n    onPress(row, col)\n  }\n\n  const interactionEvent = (): InteractionEvents => {\n    if ('ontouchstart' in window) { return { touch: handlePress, mousedown: undefined } }\n    return { touch: undefined, mousedown: handlePress }\n  }\n\n  const getAlt = () => (value ? images.unpressed.alt : images.pressed.alt)\n\n  const getSrc = () => (value ? images.unpressed.src : images.pressed.src)\n\n  const events = interactionEvent()\n\n  return (\n    <div role=\"none\" onMouseDown={events.mousedown} onTouchStart={events.touch}>\n      <img width=\"32\" alt={getAlt()} src={getSrc()} />\n    </div>\n  )\n}\n\nexport default Bubble\n","// eslint-disable-next-line\nimport * as React from 'react'\nimport { useState } from 'react'\nimport { uniqueId } from 'lodash'\nimport Bubble from './Bubble'\nimport { TimerContext } from './TimesManager'\n\nexport interface BubbleTableProps {\n    requestGameEnd: () => void,\n    requestGameStart: () => void,\n}\n\nconst ROWS = 5\nconst COLUMNS = 6\n\nconst createInitialGrid = (row: number, col: number): boolean[][] => {\n  const inner: boolean[] = []\n  const grid: boolean[][] = []\n  for (let j = 0; j < col; j++) {\n    inner[j] = true\n  }\n  for (let i = 0; i < row; i++) {\n    grid[i] = [...inner]\n  }\n  return grid\n}\n\nconst copyGrid = (grid: boolean[][]): boolean[][] => {\n  const newGrid: boolean[][] = []\n  grid.map((row) => newGrid.push([...row]))\n  return newGrid\n}\n\nconst initialGrid: boolean[][] = createInitialGrid(ROWS, COLUMNS)\n\nconst BubbleTable: React.FunctionComponent<BubbleTableProps> = ({ requestGameEnd, requestGameStart }) => {\n  const [Grid, setGrid] = useState<boolean[][]>(copyGrid(initialGrid))\n  const gaming = React.useContext(TimerContext)\n\n  const gridIsClear = (grid: boolean[][]): boolean => grid.every((row) => row.every((el) => !el))\n\n  const doToggle = (i: number, j: number) => {\n    const grid = copyGrid(Grid)\n    grid[i][j] = !grid[i][j]\n    if (gaming) {\n      if (gridIsClear(grid)) {\n        requestGameEnd()\n        return setGrid(copyGrid(initialGrid))\n      }\n    } else {\n      requestGameStart()\n    }\n    return setGrid(grid)\n  }\n\n  return (\n    <table className=\"centered\">\n      <tbody>\n        { Grid.map((row, i) => (\n          <tr key={uniqueId()}>\n            {row.map((val, j) => (\n              <td key={uniqueId()}>\n                <Bubble value={val} row={i} col={j} onPress={doToggle} />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default BubbleTable\n","// eslint-disable-next-line\nimport * as React from 'react'\n\ninterface SourceCodeProps {\n\n}\n\nconst SourceCodeLink: React.FunctionComponent<SourceCodeProps> = () => {\n  const GITHUB_LINK = 'https://github.com/g-parki/PopItNow-React'\n  const LOGO_LINK = `${process.env.PUBLIC_URL}/GitHub-Mark-120px-plus.png`\n  return (<a href={GITHUB_LINK}><img className=\"logo\" src={LOGO_LINK} alt=\"GitHub logo\" /></a>)\n}\n\nexport default SourceCodeLink\n","// eslint-disable-next-line\nimport * as React from 'react'\nimport SourceCodeLink from './SourceCodeLink'\nimport { Time } from './TimesManager'\nimport TimeDisplay from './TimeDisplay'\n\ninterface BottomNavProps {\n    attempts: number;\n    bestTime?: Time;\n}\n\nconst BottomNav: React.FunctionComponent<BottomNavProps> = ({ bestTime, attempts }) => (\n  <div className=\"nav-bottom\">\n    <div className=\"nav-member\">\n      <SourceCodeLink />\n    </div>\n    <div className=\"nav-member align-left time bold-larger\">\n      <p>\n        Attempts:\n        {attempts}\n      </p>\n    </div>\n    <div className=\"nav-member align-left time bold-larger\">\n      {bestTime ? <TimeDisplay prefix=\"Best: \" time={bestTime} classes=\"no-margin\" /> : null}\n    </div>\n  </div>\n)\n\nBottomNav.defaultProps = { bestTime: undefined }\n\nexport default BottomNav\n","// eslint-disable-next-line\nimport * as React from 'react'\nimport { useState } from 'react'\nimport Timer from './Timer'\nimport BubbleTable from './BubbleTable'\nimport BottomNav from './BottomNav'\nimport TimeDisplay from './TimeDisplay'\n\ninterface TimesManagerProps {\n\n}\n\nexport interface Time {\n    minutes: number,\n    seconds: number,\n    milliseconds: number,\n    duration: number,\n}\n\nexport const TimerContext = React.createContext(false)\n\nconst TimesManager: React.FunctionComponent<TimesManagerProps> = () => {\n  const [times, setTimes] = useState<Time[]>([])\n  const [bestTime, setBestTime] = useState<Time>()\n  const [attempts, setAttempts] = useState(0)\n  const [gaming, setGaming] = useState(false)\n\n  const startGame = () => {\n    setGaming(true)\n  }\n\n  const endGame = () => {\n    setGaming(false)\n    setAttempts(attempts + 1)\n  }\n\n  const checkBestTime = (time: Time) => {\n    if (bestTime === undefined || (time.duration < bestTime.duration)) {\n      setBestTime(time)\n    }\n  }\n\n  const addTime = (time: Time) => {\n    setTimes([time, ...times])\n    checkBestTime(time)\n  }\n\n  const renderTimer = () => {\n    if (gaming) {\n      return <Timer initialTime={new Date().getTime()} sendFinal={addTime} />\n    }\n    const mostRecentTime = times[0]\n    if (mostRecentTime !== undefined) {\n      const timerDisplayClasses = (mostRecentTime === bestTime) ? 'bold-larger green' : 'bold-larger red'\n      return <TimeDisplay time={mostRecentTime} classes={timerDisplayClasses} />\n    }\n    return undefined\n  }\n\n  return (\n    <TimerContext.Provider value={gaming}>\n      <BubbleTable requestGameEnd={endGame} requestGameStart={startGame} />\n      <div className=\"center-text\">\n        {renderTimer()}\n      </div>\n      <BottomNav attempts={attempts} bestTime={bestTime} />\n    </TimerContext.Provider>\n  )\n}\n\nexport default TimesManager\n","// eslint-disable-next-line\nimport * as React from 'react'\n\ninterface TitleProps {\n\n}\n\nconst Title: React.FunctionComponent<TitleProps> = () => (\n  <div className=\"title-container\">\n    <div className=\"title-top-row\">Pop It.</div>\n    <br />\n    <div className=\"title-bottom-row\">Now.</div>\n  </div>\n)\n\nexport default Title\n","// eslint-disable-next-line\nimport React from 'react'\nimport './App.css'\nimport TimesManager from './components/TimesManager'\nimport Title from './components/Title'\n\nconst App = () => (\n  <div>\n    <Title />\n    <TimesManager />\n  </div>\n)\n\nexport default App\n","// eslint-disable-next-line\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}