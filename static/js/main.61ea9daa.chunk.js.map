{"version":3,"sources":["components/TimeDisplay.tsx","components/Timer.tsx","components/Bubble.tsx","components/BubbleTable.tsx","components/SourceCodeLink.tsx","components/BottomNav.tsx","components/TimesManager.tsx","components/Title.tsx","App.tsx","index.tsx"],"names":["zeroPad","value","digits","padded","toString","length","TimeDisplay","time","prefix","classes","stringTime","minutes","seconds","milliseconds","className","defaultProps","undefined","Timer","initialTime","sendFinal","useState","duration","currentTime","setCurrentTime","mostRecentTime","useRef","useEffect","timer","setInterval","Date","getTime","valueOf","Math","floor","current","clearInterval","images","src","alt","Bubble","row","col","onpress","handlePress","events","window","touch","mousedown","role","onMouseDown","onTouchStart","width","copyGrid","grid","newGrid","map","push","initialGrid","inner","j","i","createInitialGrid","BubbleTable","requestGameEnd","requestGameStart","Grid","setGrid","gaming","React","TimerContext","doToggle","every","el","gridIsClear","key","uniqueId","val","SourceCodeLink","LOGO_LINK","process","href","BottomNav","bestTime","attempts","TimesManager","times","setTimes","setBestTime","setAttempts","setGaming","addTime","checkBestTime","Provider","timerDisplayClasses","renderTimer","Title","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAkBMA,EAAU,SAACC,EAAeC,GAG9B,IAFA,IACIC,EADcF,EAAMG,WAEjBD,EAAOE,OAASH,GACrBC,EAAM,WAAOA,GAEf,OAAOA,GAGHG,EAAyD,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxEC,EAAyB,CAC7BC,QAASX,EAAQO,EAAKI,QAAS,GAC/BC,QAASZ,EAAQO,EAAKK,QAAS,GAC/BC,aAAcb,EAAQO,EAAKM,aAAc,IAG3C,OACE,qBAAGC,UAAWL,EAAO,UAAMA,EAAN,SAAuB,QACzCD,EACAE,EAAWC,QAFd,IAIGD,EAAWE,QAJd,IAMGF,EAAWG,eAKlBP,EAAYS,aAAe,CACzBP,YAAQQ,EACRP,aAASO,GAGIV,QCJAW,EApCoC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UACjE,EAAsCC,mBAAe,CAAET,QAAS,EAAGC,QAAS,EAAGC,aAAc,EAAGQ,SAAU,IAA1G,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAiBC,iBAAO,CAAEd,QAAS,EAAGC,QAAS,EAAGC,aAAc,EAAGQ,SAAU,IA+BnF,OA7BAK,qBAAU,WACR,IAAMC,EAAQC,aAAY,WACxB,IAAMrB,EAAa,CACjBI,QAAS,EACTC,QAAS,EACTC,aAAc,EACdQ,SAAU,GAGRA,GAAW,IAAIQ,MAAOC,UAAYZ,EACtCX,EAAKc,SAAWA,EAASU,UAEzBxB,EAAKI,QAAUqB,KAAKC,MAAMZ,EAAQ,KAClCA,GAAa,IAEbd,EAAKK,QAAUoB,KAAKC,MAAMZ,EAAW,KACrCA,GAAY,IAEZd,EAAKM,aAAeQ,EAEpBE,EAAehB,GACfiB,EAAeU,QAAU3B,IACxB,IACH,OAAO,WACL4B,cAAcR,GACdR,EAAUK,EAAeU,YAE1B,CAAChB,EAAaC,IAET,gBAAC,EAAD,CAAaZ,KAAMe,EAAab,QAAQ,iB,OCnB5C2B,EACO,CACTC,IAAK,2EACLC,IAAK,eAHHF,EAKK,CACPC,IAAK,4EACLC,IAAK,gBA2BMC,EAvBsC,SAAC,GAAkC,IAAhCtC,EAA+B,EAA/BA,MAAOuC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QACjEC,EAAc,WAClBD,EAAQF,EAAKC,IAYTG,EARA,iBAAkBC,OAAiB,CAAEC,MAAOH,EAAaI,eAAW/B,GACjE,CAAE8B,WAAO9B,EAAW+B,UAAWJ,GASxC,OACE,uBAAKK,KAAK,OAAOC,YAAaL,EAAOG,UAAWG,aAAcN,EAAOE,OACnE,uBAAKK,MAAM,KAAKb,IARErC,EAAQmC,EAAiBE,IAAMF,EAAeE,IAQjCD,IANbpC,EAAQmC,EAAiBC,IAAMD,EAAeC,QCrBhEe,EAAW,SAACC,GAChB,IAAMC,EAAuB,GAE7B,OADAD,EAAKE,KAAI,SAACf,GAAD,OAASc,EAAQE,KAAR,YAAiBhB,OAC5Bc,GAGHG,EAlBoB,SAACjB,EAAaC,GAGtC,IAFA,IAAMiB,EAAmB,GACnBL,EAAoB,GACjBM,EAAI,EAAGA,EAAIlB,EAAKkB,IACvBD,EAAMC,IAAK,EAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAKoB,IACvBP,EAAKO,GAAL,UAAcF,GAEhB,OAAOL,EASwBQ,CArBpB,EACG,GA2DDC,EArCgD,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAChF,EAAwB5C,mBAAsBgC,EAASK,IAAvD,mBAAOQ,EAAP,KAAaC,EAAb,KACMC,EAASC,aAAiBC,GAI1BC,EAAW,SAACV,EAAWD,GAC3B,IAAMN,EAAOD,EAASa,GAEtB,GADAZ,EAAKO,GAAGD,IAAMN,EAAKO,GAAGD,GAClBQ,GACF,GANgB,SAACd,GAAD,OAAgCA,EAAKkB,OAAM,SAAC/B,GAAD,OAASA,EAAI+B,OAAM,SAACC,GAAD,OAASA,QAMnFC,CAAYpB,GAEd,OADAU,IACOG,EAAQd,EAASK,SAG1BO,IAEF,OAAOE,EAAQb,IAGjB,OACE,yBAAOvC,UAAU,YACf,6BACImD,EAAKV,KAAI,SAACf,EAAKoB,GAAN,OACT,sBAAIc,IAAKC,sBACNnC,EAAIe,KAAI,SAACqB,EAAKjB,GAAN,OACP,sBAAIe,IAAKC,sBACP,gBAAC,EAAD,CAAQ1E,MAAO2E,EAAKpC,IAAKoB,EAAGnB,IAAKkB,EAAGjB,QAAS4B,eCjD9CO,EANkD,WAC/D,IACMC,EAAS,UAAMC,kBAAN,+BACf,OAAQ,qBAAGC,KAFS,6CAEU,uBAAKlE,UAAU,OAAOuB,IAAKyC,EAAWxC,IAAI,kBCCpE2C,EAAqD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OACzD,uBAAKrE,UAAU,cACb,uBAAKA,UAAU,cACb,gBAAC,EAAD,OAEF,uBAAKA,UAAU,0CACb,qCAEGqE,IAGL,uBAAKrE,UAAU,0CACZoE,EAAW,gBAAC,EAAD,CAAa1E,OAAO,SAASD,KAAM2E,EAAUzE,QAAQ,cAAiB,QAKxFwE,EAAUlE,aAAe,CAAEmE,cAAUlE,GAEtBiE,QCXFZ,EAAeD,iBAAoB,GAmDjCgB,EAjDkD,WAC/D,MAA0BhE,mBAAiB,IAA3C,mBAAOiE,EAAP,KAAcC,EAAd,KACA,EAAgClE,qBAAhC,mBAAO8D,EAAP,KAAiBK,EAAjB,KACA,EAAgCnE,mBAAS,GAAzC,mBAAO+D,EAAP,KAAiBK,EAAjB,KACA,EAA4BpE,oBAAS,GAArC,mBAAO+C,EAAP,KAAesB,EAAf,KAiBMC,EAAU,SAACnF,GACf+E,EAAS,CAAC/E,GAAF,mBAAW8E,KAPC,SAAC9E,SACJS,IAAbkE,GAA2B3E,EAAKc,SAAW6D,EAAS7D,WACtDkE,EAAYhF,GAMdoF,CAAcpF,IAehB,OACE,gBAAC8D,EAAauB,SAAd,CAAuB3F,MAAOkE,GAC5B,gBAAC,EAAD,CAAaJ,eA9BD,WACd0B,GAAU,GACVD,EAAYL,EAAW,IA4BiBnB,iBAlCxB,WAChByB,GAAU,MAkCR,uBAAK3E,UAAU,eAfC,WAClB,GAAIqD,EACF,OAAO,gBAAC,EAAD,CAAOjD,aAAa,IAAIW,MAAOC,UAAWX,UAAWuE,IAE9D,IAAMlE,EAAiB6D,EAAM,GAC7B,QAAuBrE,IAAnBQ,EAA8B,CAChC,IAAMqE,EAAuBrE,IAAmB0D,EAAY,oBAAsB,kBAClF,OAAO,gBAAC,EAAD,CAAa3E,KAAMiB,EAAgBf,QAASoF,KAShDC,IAEH,gBAAC,EAAD,CAAWX,SAAUA,EAAUD,SAAUA,MClDhCa,EARoC,kBACjD,uBAAKjF,UAAU,mBACb,uBAAKA,UAAU,iBAAf,WACA,2BACA,uBAAKA,UAAU,oBAAf,UCEWkF,EAPH,kBACV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.61ea9daa.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nimport * as React from 'react'\r\nimport { Time } from './TimesManager'\r\n\r\nexport type DisplayTime = Pick<Time, 'minutes' | 'seconds' | 'milliseconds'>\r\n\r\ninterface TimeDisplayProps {\r\n    time: DisplayTime,\r\n    prefix?: string,\r\n    classes?: string,\r\n}\r\n\r\ninterface StringTime {\r\n    minutes: string,\r\n    seconds: string,\r\n    milliseconds: string,\r\n}\r\n\r\nconst zeroPad = (value: number, digits: number): string => {\r\n  const stringVal = value.toString()\r\n  let padded = stringVal\r\n  while (padded.length < digits) {\r\n    padded = `0${padded}`\r\n  }\r\n  return padded\r\n}\r\n\r\nconst TimeDisplay: React.FunctionComponent<TimeDisplayProps> = ({ time, prefix, classes }) => {\r\n  const stringTime: StringTime = {\r\n    minutes: zeroPad(time.minutes, 2),\r\n    seconds: zeroPad(time.seconds, 2),\r\n    milliseconds: zeroPad(time.milliseconds, 3),\r\n  }\r\n\r\n  return (\r\n    <p className={classes ? `${classes} time` : 'time'}>\r\n      {prefix}\r\n      {stringTime.minutes}\r\n      :\r\n      {stringTime.seconds}\r\n      .\r\n      {stringTime.milliseconds}\r\n    </p>\r\n  )\r\n}\r\n\r\nTimeDisplay.defaultProps = {\r\n  prefix: undefined,\r\n  classes: undefined,\r\n}\r\n\r\nexport default TimeDisplay\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport TimeDisplay from './TimeDisplay'\r\nimport { Time } from './TimesManager'\r\n\r\ninterface TimerProps {\r\n    initialTime: number,\r\n    sendFinal: (arg: Time) => void,\r\n}\r\n\r\nconst Timer: React.FunctionComponent<TimerProps> = ({ initialTime, sendFinal }) => {\r\n  const [currentTime, setCurrentTime] = useState<Time>({ minutes: 0, seconds: 0, milliseconds: 0, duration: 0 })\r\n  const mostRecentTime = useRef({ minutes: 0, seconds: 0, milliseconds: 0, duration: 0 })\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      const time: Time = {\r\n        minutes: 0,\r\n        seconds: 0,\r\n        milliseconds: 0,\r\n        duration: 0,\r\n      }\r\n\r\n      let duration = new Date().getTime() - initialTime\r\n      time.duration = duration.valueOf()\r\n\r\n      time.minutes = Math.floor(duration / (1000 * 60))\r\n      duration %= (1000 * 60)\r\n\r\n      time.seconds = Math.floor(duration / 1000)\r\n      duration %= 1000\r\n\r\n      time.milliseconds = duration\r\n\r\n      setCurrentTime(time)\r\n      mostRecentTime.current = time\r\n    }, 10)\r\n    return () => {\r\n      clearInterval(timer)\r\n      sendFinal(mostRecentTime.current)\r\n    }\r\n  }, [initialTime, sendFinal])\r\n\r\n  return (<TimeDisplay time={currentTime} classes=\"bold-larger\" />)\r\n}\r\n\r\nexport default Timer\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\n\r\nexport interface BubbleProps {\r\n    value: boolean,\r\n    row: number,\r\n    col: number,\r\n    onpress: (i: number, j: number) => void,\r\n}\r\n\r\ninterface InteractionEvents {\r\n    touch: undefined | (() => void),\r\n    mousedown: undefined | (() => void),\r\n}\r\n\r\ninterface ImageData {\r\n    readonly src: string,\r\n    readonly alt: string,\r\n}\r\n\r\ninterface Images {\r\n    readonly pressed: ImageData,\r\n    readonly unpressed: ImageData\r\n}\r\n\r\nconst images: Images = {\r\n  unpressed: {\r\n    src: 'https://upload.wikimedia.org/wikipedia/commons/3/3f/Button_Icon_Blue.svg',\r\n    alt: 'blue button',\r\n  },\r\n  pressed: {\r\n    src: 'https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg',\r\n    alt: 'white button',\r\n  },\r\n}\r\n\r\nconst Bubble: React.FunctionComponent<BubbleProps> = ({ value, row, col, onpress }) => {\r\n  const handlePress = () => {\r\n    onpress(row, col)\r\n  }\r\n\r\n  const interactionEvent = (): InteractionEvents => {\r\n    if ('ontouchstart' in window) { return { touch: handlePress, mousedown: undefined } }\r\n    return { touch: undefined, mousedown: handlePress }\r\n  }\r\n\r\n  const getAlt = () => (value ? images.unpressed.alt : images.pressed.alt)\r\n\r\n  const getSrc = () => (value ? images.unpressed.src : images.pressed.src)\r\n\r\n  const events = interactionEvent()\r\n\r\n  return (\r\n    <div role=\"none\" onMouseDown={events.mousedown} onTouchStart={events.touch}>\r\n      <img width=\"32\" alt={getAlt()} src={getSrc()} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bubble\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\nimport { useState } from 'react'\r\nimport { uniqueId } from 'lodash'\r\nimport Bubble from './Bubble'\r\nimport { TimerContext } from './TimesManager'\r\n\r\nexport interface BubbleTableProps {\r\n    requestGameEnd: () => void,\r\n    requestGameStart: () => void,\r\n}\r\n\r\nconst ROWS = 5\r\nconst COLUMNS = 6\r\n\r\nconst createInitialGrid = (row: number, col: number): boolean[][] => {\r\n  const inner: boolean[] = []\r\n  const grid: boolean[][] = []\r\n  for (let j = 0; j < col; j++) {\r\n    inner[j] = true\r\n  }\r\n  for (let i = 0; i < row; i++) {\r\n    grid[i] = [...inner]\r\n  }\r\n  return grid\r\n}\r\n\r\nconst copyGrid = (grid: boolean[][]): boolean[][] => {\r\n  const newGrid: boolean[][] = []\r\n  grid.map((row) => newGrid.push([...row]))\r\n  return newGrid\r\n}\r\n\r\nconst initialGrid: boolean[][] = createInitialGrid(ROWS, COLUMNS)\r\n\r\nconst BubbleTable: React.FunctionComponent<BubbleTableProps> = ({ requestGameEnd, requestGameStart }) => {\r\n  const [Grid, setGrid] = useState<boolean[][]>(copyGrid(initialGrid))\r\n  const gaming = React.useContext(TimerContext)\r\n\r\n  const gridIsClear = (grid: boolean[][]): boolean => grid.every((row) => row.every((el) => !el))\r\n\r\n  const doToggle = (i: number, j: number) => {\r\n    const grid = copyGrid(Grid)\r\n    grid[i][j] = !grid[i][j]\r\n    if (gaming) {\r\n      if (gridIsClear(grid)) {\r\n        requestGameEnd()\r\n        return setGrid(copyGrid(initialGrid))\r\n      }\r\n    } else {\r\n      requestGameStart()\r\n    }\r\n    return setGrid(grid)\r\n  }\r\n\r\n  return (\r\n    <table className=\"centered\">\r\n      <tbody>\r\n        { Grid.map((row, i) => (\r\n          <tr key={uniqueId()}>\r\n            {row.map((val, j) => (\r\n              <td key={uniqueId()}>\r\n                <Bubble value={val} row={i} col={j} onpress={doToggle} />\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default BubbleTable\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\n\r\ninterface SourceCodeProps {\r\n\r\n}\r\n\r\nconst SourceCodeLink: React.FunctionComponent<SourceCodeProps> = () => {\r\n  const GITHUB_LINK = 'https://github.com/g-parki/PopItNow-React'\r\n  const LOGO_LINK = `${process.env.PUBLIC_URL}/GitHub-Mark-120px-plus.png`\r\n  return (<a href={GITHUB_LINK}><img className=\"logo\" src={LOGO_LINK} alt=\"GitHub logo\" /></a>)\r\n}\r\n\r\nexport default SourceCodeLink\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\nimport SourceCodeLink from './SourceCodeLink'\r\nimport { Time } from './TimesManager'\r\nimport TimeDisplay from './TimeDisplay'\r\n\r\ninterface BottomNavProps {\r\n    attempts: number;\r\n    bestTime?: Time;\r\n}\r\n\r\nconst BottomNav: React.FunctionComponent<BottomNavProps> = ({ bestTime, attempts }) => (\r\n  <div className=\"nav-bottom\">\r\n    <div className=\"nav-member\">\r\n      <SourceCodeLink />\r\n    </div>\r\n    <div className=\"nav-member align-left time bold-larger\">\r\n      <p>\r\n        Attempts:\r\n        {attempts}\r\n      </p>\r\n    </div>\r\n    <div className=\"nav-member align-left time bold-larger\">\r\n      {bestTime ? <TimeDisplay prefix=\"Best: \" time={bestTime} classes=\"no-margin\" /> : null}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nBottomNav.defaultProps = { bestTime: undefined }\r\n\r\nexport default BottomNav\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\nimport { useState } from 'react'\r\nimport Timer from './Timer'\r\nimport BubbleTable from './BubbleTable'\r\nimport BottomNav from './BottomNav'\r\nimport TimeDisplay from './TimeDisplay'\r\n\r\ninterface TimesManagerProps {\r\n\r\n}\r\n\r\nexport interface Time {\r\n    minutes: number,\r\n    seconds: number,\r\n    milliseconds: number,\r\n    duration: number,\r\n}\r\n\r\nexport const TimerContext = React.createContext(false)\r\n\r\nconst TimesManager: React.FunctionComponent<TimesManagerProps> = () => {\r\n  const [times, setTimes] = useState<Time[]>([])\r\n  const [bestTime, setBestTime] = useState<Time>()\r\n  const [attempts, setAttempts] = useState(0)\r\n  const [gaming, setGaming] = useState(false)\r\n\r\n  const startGame = () => {\r\n    setGaming(true)\r\n  }\r\n\r\n  const endGame = () => {\r\n    setGaming(false)\r\n    setAttempts(attempts + 1)\r\n  }\r\n\r\n  const checkBestTime = (time: Time) => {\r\n    if (bestTime === undefined || (time.duration < bestTime.duration)) {\r\n      setBestTime(time)\r\n    }\r\n  }\r\n\r\n  const addTime = (time: Time) => {\r\n    setTimes([time, ...times])\r\n    checkBestTime(time)\r\n  }\r\n\r\n  const renderTimer = () => {\r\n    if (gaming) {\r\n      return <Timer initialTime={new Date().getTime()} sendFinal={addTime} />\r\n    }\r\n    const mostRecentTime = times[0]\r\n    if (mostRecentTime !== undefined) {\r\n      const timerDisplayClasses = (mostRecentTime === bestTime) ? 'bold-larger green' : 'bold-larger red'\r\n      return <TimeDisplay time={mostRecentTime} classes={timerDisplayClasses} />\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  return (\r\n    <TimerContext.Provider value={gaming}>\r\n      <BubbleTable requestGameEnd={endGame} requestGameStart={startGame} />\r\n      <div className=\"center-text\">\r\n        {renderTimer()}\r\n      </div>\r\n      <BottomNav attempts={attempts} bestTime={bestTime} />\r\n    </TimerContext.Provider>\r\n  )\r\n}\r\n\r\nexport default TimesManager\r\n","// eslint-disable-next-line\r\nimport * as React from 'react'\r\n\r\ninterface TitleProps {\r\n\r\n}\r\n\r\nconst Title: React.FunctionComponent<TitleProps> = () => (\r\n  <div className=\"title-container\">\r\n    <div className=\"title-top-row\">Pop It.</div>\r\n    <br />\r\n    <div className=\"title-bottom-row\">Now.</div>\r\n  </div>\r\n)\r\n\r\nexport default Title\r\n","// eslint-disable-next-line\r\nimport React from 'react'\r\nimport './App.css'\r\nimport TimesManager from './components/TimesManager'\r\nimport Title from './components/Title'\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Title />\r\n    <TimesManager />\r\n  </div>\r\n)\r\n\r\nexport default App\r\n","// eslint-disable-next-line\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}