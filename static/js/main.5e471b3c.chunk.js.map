{"version":3,"sources":["components/SourceCodeLink.tsx","components/TimeDisplay.tsx","components/TimesTable.tsx","components/Timer.tsx","components/Bubble.tsx","components/BubbleTable.tsx","components/TimesManager.tsx","components/Title.tsx","App.tsx","index.tsx"],"names":["SourceCode","className","href","src","process","alt","zeroPad","value","digits","padded","toString","length","TimeDisplay","time","string_time","minutes","seconds","milliseconds","TimesTable","times","gaming","React","TimerContext","timeRow","span_class","key","uniqueId","rows","entries","index","push","timeRows","map","row","Timer","initialTime","sendFinal","useState","currentTime","setCurrentTime","most_recent_time","useRef","useEffect","timer","setInterval","duration","Date","getTime","Math","floor","current","clearInterval","Bubble","col","onclick","handleClick","events","window","touch","click","undefined","width","onClick","onTouchStart","copy_grid","grid","_grid","initial_grid","_inner","j","i","create_initial_grid","BubbleTable","requestGameEnd","requestGameStart","Grid","setGrid","doToggle","gridIsClear","every","el","val","TimesManager","setTimes","setGaming","addTime","Provider","renderTimer","Title","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAYeA,G,YAN8C,WAGzD,OAAS,uBAAKC,UAAU,OAAM,qBAAGC,KAFb,6CAEgC,uBAAKD,UAAU,OAAOE,IADxDC,6CACwEC,IAAK,oB,4BCI7FC,EAAU,SAACC,EAAeC,GAG5B,IAFA,IACIC,EADeF,EAAMG,WAElBD,EAAOE,OAASH,GACnBC,EAAS,IAAMA,EAEnB,OAAOA,GAcIG,EAXgD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExDC,EAA0B,CAC5BC,QAAST,EAAQO,EAAKE,QAAS,GAC/BC,QAASV,EAAQO,EAAKG,QAAS,GAC/BC,aAAcX,EAAQO,EAAKI,aAAc,IAG7C,OAAQ,qBAAGhB,UAAU,QAAQa,EAAYC,QAAjC,IAA2CD,EAAYE,QAAvD,IAAiEF,EAAYG,eCW1EC,EAhC8C,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtDC,EAASC,aAAiBC,GAE1BC,EAAU,SAACV,EAAYW,GACzB,OAAIA,EACQ,sBAAIC,IAAKC,sBAAY,wBAAMzB,UAAWuB,GAAY,gBAAC,EAAD,CAAaX,KAAMA,MAErE,sBAAIY,IAAKC,sBAAY,gBAAC,EAAD,CAAab,KAAMA,MAexD,OACI,yBAAOZ,UAAW,YACd,6BAdS,WACb,IADmB,EACb0B,EAAsB,GADT,cAGSR,EAAMS,WAHf,IAGnB,2BAA6C,CAAC,IAAD,yBAAjCC,EAAiC,KAA1BhB,EAA0B,KAC3B,IAAVgB,GAAgBT,EAGhBO,EAAKG,KAAKP,EAAQV,IAFlBc,EAAKG,KAAKP,EAAQV,EAAM,gBALb,8BASnB,OAAOc,EAMFI,GAAWC,KAAI,SAACC,GAAD,OAAS,sBAAIR,IAAKC,sBAAaO,SCK5CC,EA7BoC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAE/D,EAAsCC,mBAAe,CAAEtB,QAAS,EAAGC,QAAS,EAAGC,aAAc,IAA7F,mBAAOqB,EAAP,KAAoBC,EAApB,KACIC,EAAmBC,iBAAO,CAAE1B,QAAS,EAAGC,QAAS,EAAGC,aAAc,IAuBtE,OArBAyB,qBAAU,WACN,IAAMC,EAAQC,aAAY,WACtB,IAAIC,GAAW,IAAIC,MAAOC,UAAYZ,EAChCpB,EAAUiC,KAAKC,MAAMJ,EAAS,IAAK,IACzCA,GAAsB,IAAV9B,EAAiB,GAC7B,IAAMC,EAAUgC,KAAKC,MAAMJ,EAAS,KAE9BhC,EAAO,CACTE,QAASA,EACTC,QAASA,EACTC,aAJJ4B,GAAsB,IAAV7B,GAMZuB,EAAe1B,GACf2B,EAAiBU,QAAUrC,IAC5B,IACH,OAAO,WACHsC,cAAcR,GACdP,EAAUI,EAAiBU,YAE9B,CAACf,EAAaC,IAEX,wBAAMnC,UAAU,QAAO,gBAAC,EAAD,CAAaY,KAAMyB,MCEvCc,EArBsC,SAAC,GAAkC,IAAhC7C,EAA+B,EAA/BA,MAAO0B,EAAwB,EAAxBA,IAAKoB,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAQ/DC,EAAc,WAChBD,EAAQrB,EAAKoB,IAGXG,EATE,iBAAkBC,OACX,CAAEC,MAAOH,EAAaI,WAAOC,GACjC,CAAEF,WAAOE,EAAWD,MAAOJ,GAStC,OACI,2BACI,uBAAKM,MAAM,KAAKxD,IAAI,oBAAoByD,QAASN,EAAOG,MAAOI,aAAcP,EAAOE,MAAOvD,IAAKI,EAlB7E,2EADF,gFCYvByD,EAAY,SAACC,GACf,IAAMC,EAAqB,GAE3B,OADAD,EAAKjC,KAAI,SAAAC,GAAG,OAAIiC,EAAMpC,KAAN,YAAeG,OACxBiC,GAGLC,EAlBsB,SAAClC,EAAaoB,GAGtC,IAFA,IAAIe,EAAoB,GACpBF,EAAqB,GAChBG,EAAE,EAAGA,EAAIhB,EAAKgB,IACnBD,EAAOC,IAAK,EAEhB,IAAK,IAAIC,EAAE,EAAGA,EAAIrC,EAAKqC,IACnBJ,EAAMI,GAAN,UAAeF,GAEnB,OAAOF,EASuBK,CArBrB,EACG,GA4DDC,EAtCgD,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAE9E,EAAwBrC,mBAAsB2B,EAAUG,IAAxD,mBAAOQ,EAAP,KAAaC,EAAb,KACMxD,EAASC,aAAiBC,GAE1BuD,EAAW,SAACP,EAAWD,GACzB,IAAIH,EAAQF,EAAUW,GAEtB,GADAT,EAAMI,GAAGD,IAAMH,EAAMI,GAAGD,GACpBjD,GACA,GAAI0D,EAAYZ,GAEZ,OADAO,IACOG,EAAQZ,EAAUG,SAG7BO,IAEJ,OAAOE,EAAQV,IAGbY,EAAc,SAACb,GACjB,OAAOA,EAAKc,OAAM,SAAA9C,GAAG,OAAIA,EAAI8C,OAAM,SAAAC,GAAE,OAAKA,SAG9C,OACI,yBAAO/E,UAAW,YACd,6BACE0E,EAAK3C,KAAI,SAACC,EAAKqC,GAAN,OACP,sBAAI7C,IAAKC,sBAAaO,EAAID,KAAI,SAACiD,EAAKZ,GAAN,OAC1B,sBAAI5C,IAAKC,sBACL,gBAAC,EAAD,CAAQnB,MAAO0E,EAAKhD,IAAKqC,EAAGjB,IAAKgB,EAAGf,QAASuB,eC/CxDvD,EAAeD,iBAAoB,GAoCjC6D,EAlCkD,WAE7D,MAA0B7C,mBAAiB,IAA3C,mBAAOlB,EAAP,KAAcgE,EAAd,KACA,EAA4B9C,oBAAS,GAArC,mBAAOjB,EAAP,KAAegE,EAAf,KAUMC,EAAU,SAACxE,GACbsE,EAAS,CAACtE,GAAF,mBAAWM,MASvB,OACI,gBAACG,EAAagE,SAAd,CAAuB/E,MAAOa,GAC1B,gBAAC,EAAD,CAAaqD,eAhBL,WACZW,GAAU,IAeiCV,iBApB7B,WACdU,GAAU,MAoBN,uBAAKnF,UAAW,eATJ,WAChB,GAAImB,EACA,OAAO,gBAAC,EAAD,CAAOe,aAAa,IAAIW,MAAOC,UAAWX,UAAWiD,IAQvDE,GACD,gBAAC,EAAD,CAAYpE,MAAOA,OCpCpBqE,EAJoC,WAC/C,OAAS,uBAAKvF,UAAU,SAAf,UAA8B,2BAA9B,SCSEwF,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.5e471b3c.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface SourceCodeProps {\n    \n}\n \nconst SourceCode: React.FunctionComponent<SourceCodeProps> = () => {\n    const GITHUB_LINK = \"https://github.com/g-parki/PopItNow-React\"\n    const LOGO_LINK = process.env.PUBLIC_URL + \"/GitHub-Mark-120px-plus.png\"\n    return ( <div className=\"nav\"><a href={GITHUB_LINK}><img className=\"logo\" src={LOGO_LINK} alt={\"Didn't load\"}/></a></div>);\n}\n \nexport default SourceCode;","import * as React from 'react';\nimport { Time } from './TimesManager'\n\ninterface TimeDisplayProps {\n    time: Time,\n}\n\ninterface StringTime {\n    minutes: string,\n    seconds: string,\n    milliseconds: string,\n}\n\nconst zeroPad = (value: number, digits: number): string => {\n    const string_val = value.toString()\n    let padded = string_val\n    while (padded.length < digits) {\n        padded = \"0\" + padded\n    }\n    return padded\n}\n  \nconst TimeDisplay: React.FunctionComponent<TimeDisplayProps> = ({ time }) => {\n    \n    const string_time: StringTime = {\n        minutes: zeroPad(time.minutes, 2),\n        seconds: zeroPad(time.seconds, 2),\n        milliseconds: zeroPad(time.milliseconds, 3),\n    }\n\n    return (<p className=\"time\">{string_time.minutes}:{string_time.seconds}.{string_time.milliseconds}</p>);\n}\n\nexport default TimeDisplay;","import * as React from 'react';\nimport { uniqueId } from 'lodash';\nimport { Time, TimerContext } from './TimesManager'\nimport TimeDisplay from './TimeDisplay'\n\ninterface TimesTableProps {\n    times: Time[],\n}\n\nconst TimesTable: React.FunctionComponent<TimesTableProps> = ({ times }) => {\n    const gaming = React.useContext(TimerContext)\n\n    const timeRow = (time: Time, span_class?: string) => {\n        if (span_class)\n            return (<td key={uniqueId()}><span className={span_class}><TimeDisplay time={time}/></span></td>)\n        else\n            return (<td key={uniqueId()}><TimeDisplay time={time}/></td>)\n    }\n    \n    const timeRows = () => {\n        const rows: JSX.Element[] = []\n\n        for (const [index, time] of times.entries()) {\n            if (index === 0 && !gaming)\n                rows.push(timeRow(time, \"bold green\"))\n            else\n                rows.push(timeRow(time))\n        }\n        return rows\n    }\n\n    return (\n        <table className= \"centered\">\n            <tbody>\n            {timeRows().map((row) => <tr key={uniqueId()}>{row}</tr>)}\n            </tbody>\n        </table>\n    )\n;\n}\n \nexport default TimesTable;","import * as React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport TimeDisplay from './TimeDisplay';\nimport { Time } from './TimesManager'\n\ninterface TimerProps {\n    initialTime: number,\n    sendFinal: (arg: Time) => void,\n}\n \nconst Timer: React.FunctionComponent<TimerProps> = ({ initialTime, sendFinal }) => {\n\n    const [currentTime, setCurrentTime] = useState<Time>({ minutes: 0, seconds: 0, milliseconds: 0 })\n    let most_recent_time = useRef({ minutes: 0, seconds: 0, milliseconds: 0 })\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            let duration = new Date().getTime() - initialTime\n            const minutes = Math.floor(duration/1000/60)\n            duration -= minutes * 1000 * 60\n            const seconds = Math.floor(duration/1000)\n            duration -= seconds * 1000\n            const time = { \n                minutes: minutes,\n                seconds: seconds,\n                milliseconds: duration,\n            }\n            setCurrentTime(time)\n            most_recent_time.current = time\n        }, 10);\n        return () => {\n            clearInterval(timer)\n            sendFinal(most_recent_time.current)\n        };\n      }, [initialTime, sendFinal]);\n\n    return (<span className=\"bold\"><TimeDisplay time={currentTime}/></span>);\n}\n \nexport default Timer;\n\n","import * as React from 'react';\n\ninterface BubbleProps {\n    value: boolean,\n    row: number,\n    col: number,\n    onclick: (arg1: number, arg2: number) => void,\n}\n\ninterface InteractionEvents {\n    touch: undefined | (() => void),\n    click: undefined | (() => void),\n}\n\nconst PRESSED_LINK: string = \"https://upload.wikimedia.org/wikipedia/commons/9/96/Button_Icon_White.svg\"\nconst UNPRESSED_LINK: string = \"https://upload.wikimedia.org/wikipedia/commons/3/3f/Button_Icon_Blue.svg\"\n\nconst Bubble: React.FunctionComponent<BubbleProps> = ({ value, row, col, onclick }) => {\n\n    const interaction_event = (): InteractionEvents => {\n        if ('ontouchstart' in window)\n            return { touch: handleClick, click: undefined }\n        return { touch: undefined, click: handleClick }\n    }\n\n    const handleClick = () => {\n        onclick(row, col)\n    }\n\n    const events = interaction_event()\n\n    return (\n        <div>\n            <img width=\"32\" alt=\"Glass button blue\" onClick={events.click} onTouchStart={events.touch} src={value ? UNPRESSED_LINK : PRESSED_LINK}></img>\n        </div>\n    );\n}\n \nexport default Bubble;","import * as React from 'react';\nimport Bubble from './Bubble';\nimport { useState } from 'react';\nimport { uniqueId } from 'lodash'\nimport { TimerContext } from './TimesManager'\n\ninterface BubbleTableProps {\n    requestGameEnd: () => void,\n    requestGameStart: () => void,\n}\n\nconst ROWS = 5;\nconst COLUMNS = 6;\n\nconst create_initial_grid = (row: number, col: number): boolean[][] => {\n    let _inner: boolean[] = []\n    let _grid: boolean[][] = []\n    for (let j=0; j < col; j++) {\n        _inner[j] = true\n    }\n    for (let i=0; i < row; i++) {\n        _grid[i] = [..._inner] \n    }\n    return _grid\n}\n\nconst copy_grid = (grid: boolean[][]): boolean[][] => {\n    const _grid: boolean[][] = []\n    grid.map(row => _grid.push([...row]))\n    return _grid\n}\n\nconst initial_grid: boolean[][] = create_initial_grid(ROWS, COLUMNS)\n\nconst BubbleTable: React.FunctionComponent<BubbleTableProps> = ({ requestGameEnd, requestGameStart }) => {\n\n    const [Grid, setGrid] = useState<boolean[][]>(copy_grid(initial_grid))\n    const gaming = React.useContext(TimerContext)\n\n    const doToggle = (i: number, j: number) => {\n        let _grid = copy_grid(Grid)\n        _grid[i][j] = !_grid[i][j]\n        if (gaming) {\n            if (gridIsClear(_grid)) {\n                requestGameEnd()\n                return setGrid(copy_grid(initial_grid))\n            }\n        } else {\n            requestGameStart()\n        }\n        return setGrid(_grid)\n    }\n\n    const gridIsClear = (grid: boolean[][]): boolean => {\n        return grid.every(row => row.every(el => !el))\n    }\n\n    return (  \n        <table className= \"centered\">\n            <tbody>\n            { Grid.map((row, i) => (\n                <tr key={uniqueId()}>{row.map((val, j) => (\n                    <td key={uniqueId()}>\n                        <Bubble value={val} row={i} col={j} onclick={doToggle} />\n                    </td>\n                ))}</tr>\n            ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default BubbleTable;","import * as React from 'react';\nimport TimesTable from './TimesTable';\nimport { useState } from 'react';\nimport Timer from './Timer';\nimport BubbleTable from './BubbleTable';\n\ninterface TimesManagerProps {\n    \n}\n\nexport interface Time {\n    minutes: number,\n    seconds: number,\n    milliseconds: number,\n}\n\nexport const TimerContext = React.createContext(false)\n \nconst TimesManager: React.FunctionComponent<TimesManagerProps> = () => {\n\n    const [times, setTimes] = useState<Time[]>([])\n    const [gaming, setGaming] = useState(false)\n  \n    const startGame = () => {\n        setGaming(true)\n    }\n\n    const endGame = () => {\n        setGaming(false)\n    }\n\n    const addTime = (time: Time) => {\n        setTimes([time, ...times])\n    }\n\n    const renderTimer = () => {\n        if (gaming) {\n            return <Timer initialTime={new Date().getTime()} sendFinal={addTime}/>\n        }\n    }\n\n    return (\n        <TimerContext.Provider value={gaming}>\n            <BubbleTable requestGameEnd= {endGame} requestGameStart= {startGame}/>\n            <div className= \"center-text\">\n                {renderTimer()}\n                <TimesTable times={times}/>\n            </div> \n        </TimerContext.Provider>\n    );\n}\n \nexport default TimesManager;","import * as React from 'react';\n\ninterface TitleProps {\n    \n}\n \nconst Title: React.FunctionComponent<TitleProps> = () => {\n    return ( <div className=\"title\">Pop It.<br/>Now.</div> );\n}\n \nexport default Title;","import React from 'react';\nimport './App.css';\nimport SourceCode from './components/SourceCodeLink';\nimport TimesManager from './components/TimesManager';\nimport Title from './components/Title'\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n      <TimesManager />\n      <SourceCode />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}